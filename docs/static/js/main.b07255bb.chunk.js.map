{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,sBAAMC,SAhBS,SAACC,GAChBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAO,IAEzBR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,MAUlB,SACA,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAvBoB,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACI,sBAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAIrB,ECJsB,SAACA,GAEvB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OAlBAC,qBAAU,WACPxB,EAAQC,GACPwB,MAAK,SAAAC,GAEDH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAQlB,CAACpB,IAIIqB,EDxBuBK,CAAa1B,GAA/Ba,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAapB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,iBAAb,qBAIZ,qBAAMA,UAAU,YAAhB,SAEYH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIC,aE9BpBgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAQA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEO2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCnB5B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b07255bb.chunk.js","sourcesContent":["import React, { useState } from 'react'//Para abreviar rafc no olvidar\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange=(e)=>{//InputValue con lo que se escribe en el cuadro de texto\r\n        setinputValue(e.target.value);\r\n    }\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();//Prevenir el comportamiento por defecto del formulario\r\n\r\n        if (inputValue.trim().length>2){\r\n            //Llamar a setCategories para que agregue los distintos inputValue\r\n            setCategories(cats=>[ inputValue, ...cats]);\r\n            setinputValue('');\r\n\r\n        }\r\n        \r\n\r\n        //console.log('Submit hecho')\r\n\r\n    }\r\n//No es necesario utilizar el fragment si hay un elemento divisor como es el caso del form\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        <input \r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        />\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=T82E7NF146UiVeVo1r0pWvXTLWE3j4Bi`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n\r\n}\r\n\r\n    \r\n    \r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            {/*img.title*/}\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n//import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    \n    //const [images, setImages] = useState([]);\n\n    const {data:images, loading}= useFetchGifs(category);//Mandar como argumento la categoría para que pueda utilizarla\n\n    \n\n    //useEffect(()=>{\n       //getGifs(category)\n       //.then(setImages)\n    //},[category]);\n\n \n\n    \n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n        {loading && <p className=\"animate__flash\">Loading</p>}\n\n        \n        \n        < div className=\"card-grid\">       \n                {\n                    images.map(img =>( \n                        <GifGridItem \n                        key={img.id}\n                        {...img}\n                        />  \n                    ))\n                }\n            \n        </div>\n        \n        </>\n    )\n}\n","//Los hooks funcionan igual que las funciones, tienen la opción de llevar o no un argumento\r\nimport { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs=(category)=>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n\r\n    });\r\n    \r\n    \r\n\r\n    useEffect(()=>{\r\n       getGifs(category)\r\n       .then(imgs=>{\r\n           \r\n            setState({\r\n                data:imgs,\r\n                loading:false\r\n \r\n            });\r\n            \r\n      \r\n\r\n           \r\n       })\r\n    },[category]); //Se realiza este efecto cuando se cambia la categoría\r\n\r\n    \r\n\r\n    return state;//{data:[], loading:true}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categories=['One Punch','Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    //const handleAdd= () =>{\r\n        //setCategories([...categories,'HunterXHunter']);//Agregar un elemento al componente\r\n        //setCategories(cats=>[...cats,'HunterXHunter']);//Importante\r\n        \r\n    //}\r\n//Se manda la referencia a setCategories en el propio componente de AddCategory\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            \r\n            \r\n\r\n            <ol>\r\n               {\r\n                   categories.map(category=>(\r\n                       <GifGrid \r\n                       key={category}\r\n                       category={category} \r\n                       />\r\n                   ))\r\n\r\n                       //return <li key={category}>{category}</li>//id de bases de datos para poder referenciarlos\r\n                   \r\n               }\r\n            </ol>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';//Importación componente\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}